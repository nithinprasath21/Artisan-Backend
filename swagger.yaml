openapi: 3.0.3
info:
  title: Artisan E-commerce Backend API
  version: "1.0.0"
  description: Swagger UI for auth, artisan and product routes in this project
servers:
  - url: http://localhost:5000
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    RegisterRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        phone_number:
          type: string
        password:
          type: string
        user_type:
          type: string
          enum: [customer, artisan, admin_staff]
        username:
          type: string
        role_ids:
          type: array
          items:
            type: integer
      required: [email, password, user_type]
    AuthResponse:
      type: object
      properties:
        message: { type: string }
        userId: { type: integer }
        email: { type: string }
        userType: { type: string }
        status: { type: string }
        accessToken: { type: string }
        refreshToken: { type: string }
    LoginRequest:
      type: object
      properties:
        identifier:
          type: string
          description: email or phone number
        password:
          type: string
      required: [identifier, password]
    RefreshRequest:
      type: object
      properties:
        refreshToken:
          type: string
      required: [refreshToken]
    ArtisanProfile:
      type: object
      properties:
        user_id: { type: integer }
        email: { type: string }
        phone_number: { type: string }
        username: { type: string }
        bio: { type: string }
        profile_picture_url: { type: string }
        address_line1: { type: string }
        address_line2: { type: string }
        city: { type: string }
        state: { type: string }
        pincode: { type: string }
        craft_type_id: { type: integer }
        region_id: { type: integer }
        social_media_links: { type: string }
        bank_account_name: { type: string }
        bank_account_number_masked: { type: string }
        bank_ifsc_code: { type: string }
        kyc_status: { type: string }
        kyc_document_url: { type: string }
        avg_rating: { type: number }
        reviews_count: { type: integer }
    BankDetailsRequest:
      type: object
      properties:
        bank_name: { type: string }
        account_number: { type: string }
        ifsc_code: { type: string }
        account_holder_name: { type: string }
        pan_card_number: { type: string }
      required: [bank_name, account_number, ifsc_code, account_holder_name, pan_card_number]
    Product:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        description: { type: string }
        category_id: { type: integer }
        base_price: { type: number }
        materials: { type: string }
        technique: { type: string }
        origin: { type: string }
        dimensions: { type: string }
        weight: { type: string }
        min_order_quantity: { type: integer }
        status: { type: string }
    VariantRequest:
      type: object
      properties:
        attributes:
          type: object
        price_adjustment:
          type: number
        initial_inventory:
          type: integer
    InventoryRequest:
      type: object
      properties:
        quantity: { type: integer }
        type:
          type: string
          enum: [increase, decrease, set]
paths:
  /api/auth/register:
    post:
      summary: Register a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /api/auth/login:
    post:
      summary: Login (email or phone)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /api/auth/refresh-token:
    post:
      summary: Refresh access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
      responses:
        "200":
          description: New access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken: { type: string }
  /api/auth/protected-route:
    get:
      summary: Example protected route
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Access granted
  /api/artisan/profile:
    get:
      summary: Get artisan profile
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Artisan profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtisanProfile'
    put:
      summary: Update artisan profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Fields to update (any of the artisan profile fields)
      responses:
        "200":
          description: Profile updated
  /api/artisan/profile/picture:
    post:
      summary: Upload profile picture (multipart)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                profilePicture:
                  type: string
                  format: binary
      responses:
        "200":
          description: Upload success
  /api/artisan/profile/bank-details:
    get:
      summary: Get bank details
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Bank details
    put:
      summary: Update bank details
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BankDetailsRequest'
      responses:
        "200":
          description: Bank details updated
  /api/artisan/profile/kyc-status:
    get:
      summary: Get KYC status
      security:
        - bearerAuth: []
      responses:
        "200":
          description: KYC status
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string }
                  rejection_reason: { type: string, nullable: true }
  /api/products:
    get:
      summary: List artisan products
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: status
          schema: { type: string }
        - in: query
          name: category
          schema: { type: integer }
        - in: query
          name: sortBy
          schema: { type: string }
        - in: query
          name: page
          schema: { type: integer }
        - in: query
          name: limit
          schema: { type: integer }
      responses:
        "200":
          description: Products list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      summary: Create a new product (draft)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        "201":
          description: Product created
  /api/products/{product_id}:
    get:
      summary: Get product details
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: product_id
          required: true
          schema: { type: integer }
      responses:
        "200":
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    put:
      summary: Update product
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: product_id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        "200":
          description: Product updated
    delete:
      summary: Delete product (soft delete)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: product_id
          required: true
          schema: { type: integer }
      responses:
        "200":
          description: Deleted
  /api/products/{product_id}/media:
    post:
      summary: Upload product media
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: product_id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                mediaFile:
                  type: string
                  format: binary
                media_type:
                  type: string
                is_thumbnail:
                  type: boolean
      responses:
        "201":
          description: Media uploaded
  /api/products/{product_id}/media/{media_id}:
    delete:
      summary: Delete product media
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: product_id
          required: true
          schema: { type: integer }
        - in: path
          name: media_id
          required: true
          schema: { type: integer }
      responses:
        "200":
          description: Media deleted
  /api/products/{product_id}/variants:
    get:
      summary: List variants
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: product_id
          required: true
          schema: { type: integer }
      responses:
        "200":
          description: Variants list
    post:
      summary: Add variant
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VariantRequest'
      responses:
        "201":
          description: Variant added
  /api/products/{product_id}/variants/{variant_id}:
    put:
      summary: Update variant
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: product_id
          required: true
          schema: { type: integer }
        - in: path
          name: variant_id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VariantRequest'
      responses:
        "200": { description: Variant updated }
    delete:
      summary: Delete variant
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: product_id
          required: true
          schema: { type: integer }
        - in: path
          name: variant_id
          required: true
          schema: { type: integer }
      responses:
        "200": { description: Variant deleted }
  /api/products/{product_id}/inventory:
    put:
      summary: Update product inventory
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: product_id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryRequest'
      responses:
        "200": { description: Inventory updated }
  /api/products/{product_id}/variants/{variant_id}/inventory:
    put:
      summary: Update variant inventory
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: product_id
          required: true
          schema: { type: integer }
        - in: path
          name: variant_id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryRequest'
      responses:
        "200": { description: Variant inventory updated }
  /api/products/categories:
    get:
      summary: Get categories
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Categories
  /api/products/pricing-guidance:
    get:
      summary: Get pricing guidance
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: material_cost
          schema: { type: number }
        - in: query
          name: labor_hours
          schema: { type: number }
        - in: query
          name: complexity_level
          schema: { type: string }
        - in: query
          name: category_id
          schema: { type: integer }
      responses:
        "200":
          description: Pricing guidance